/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	describe('Game', function (){
		var evolve = __webpack_require__(2)().evolve;
		// 0 represents a dead cell
		// 1 represents a living cell

		it('can evolve an inital empty grid', function(){
			console.log("TEST 1")

			var initialState = [
				[0,0,0],
				[0,0,0],
				[0,0,0]
			];

			var resultState = [
				[0,0,0],
				[0,0,0],
				[0,0,0]
			];

			expect(evolve(initialState)).toEqual(resultState);
		});

		it('can evolve a grid with the mid-row cells alive', function(){
			console.log("TEST 2")

			var initialState = [
				[0,0,0],
				[1,1,1],
				[0,0,0]
			];

			var resultState = [
				[0,1,0],
				[0,1,0],
				[0,1,0]
			];

			expect(evolve(initialState)).toEqual(resultState);
		});

		it('can evolve a grid with the mid-row cells alive twice', function(){
			console.log("TEST 3")

			var initialState = [
				[0,0,0],
				[1,1,1],
				[0,0,0]
			];

			var resultState = [
				[0,0,0],
				[1,1,1],
				[0,0,0]
			];

			expect(evolve(evolve(initialState))).toEqual(resultState);
		});

		it('can evolve a grid with a more unusual distribution of live cells', function(){
			console.log("TEST 4")

			var initialState = [
				[1,0,0],
				[0,1,1],
				[1,1,0]
			];

			var resultState = [
				[0,1,0],
				[0,0,1],
				[1,1,1]
			];

			expect(evolve(initialState)).toEqual(resultState);
		});

		it('can evolve a non-square (but still rectangular) grid', function(){
			console.log("TEST 5")

			var initialState = [
				[0,1,1,1,1],
				[0,0,0,0,1],
				[0,0,0,0,1]
			];

			var resultState = [
				[0,0,1,1,1],
				[0,0,1,0,1],
				[0,0,0,0,0]
			];

			expect(evolve(initialState)).toEqual(resultState);
		});
	});

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	module.exports = function(){

		/*
			Assumptions:
			- A cell's existing state does not matter if it has three living neighbours as it will be alive regardless
			- The grid will be a perfect rectangle
			- Living grid cells will be represented by a 1 and dead grid cells will be represented by a 0
		*/
		
		function evolve(gridState){
			console.log("Start evolution...");

			// create a copy of the current grid state that can be updated with the new cell values
			var newState = new Array();
			for(var y = 0; y < gridState.length; y++) {
				newState[y] = gridState[y].slice();
			}

			printGrid(gridState, "Start Result");

			// loop through the entire grid
			for(var y = 0; y < gridState.length; y++) {
				for(var x = 0; x < gridState[0].length; x++) {
					var livingNeighbours = getNeighbours(gridState, y, x);
					if(livingNeighbours < 2) newState[y][x] = 0; // Scenario 1: Underpopulation
					if(livingNeighbours > 3) newState[y][x] = 0; // Scenario 2: Overcrowding
					if(livingNeighbours == 2 && gridState[y][x] == 1) newState[y][x] = 1; // Scenario 3: Survival
					if(livingNeighbours == 3) newState[y][x] = 1; // Scenario 4: Creation of life
				}
			}

			printGrid(newState, "End Result");
			console.log("Finished evolution! \n");

			// return the new grid values
			return newState;
		}

		function getNeighbours(gridState, y, x) {
			var livingNeighbours = 0;
			
			// top
			if (y-1 >= 0 && x-1 >= 0) livingNeighbours += gridState[y-1][x-1]; // top left cell
			if (y-1 >= 0) livingNeighbours += gridState[y-1][x]; // top cell
			if (y-1 >= 0 && x+1 < gridState[0].length) livingNeighbours += gridState[y-1][x+1]; // top right cell

			// mid
			if(x-1 >= 0) livingNeighbours += gridState[y][x-1]; // left cell
			if(x+1 < gridState[0].length) livingNeighbours += gridState[y][x+1]; // right cell

			// bottom
			if (y+1 < gridState.length && x-1 >= 0) livingNeighbours += gridState[y+1][x-1]; // bottom left cell
			if (y+1 < gridState.length) livingNeighbours += gridState[y+1][x]; // bottom cell
			if (y+1 < gridState.length && x+1 < gridState[0].length) livingNeighbours += gridState[y+1][x+1]; // bottom right cell

			return livingNeighbours;
		}

		function printGrid(gridState, message) { // debug function
			message = message || "";
			console.log(message);
			for(var y = 0; y < gridState.length; y++) {
				var newLine = "";
				for(var x = 0; x < gridState[0].length; x++) {
					newLine = newLine + gridState[y][x] + " ";
				}
				console.log(newLine);
			}
			console.log("")
		}

		return {
			evolve: evolve
		};
	};

/***/ })
/******/ ]);