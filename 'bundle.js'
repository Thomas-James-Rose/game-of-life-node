/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	describe('Game', function (){
		var evolve = __webpack_require__(2)().evolve;

		it('can evolve an inital empty grid', function(){

			// 0 represents a dead cell
			// 1 represents a living cell

			var initialState = [
				[0,0,0],
				[1,1,1],
				[0,0,0]
			];

			var resultState = [
				[0,1,0],
				[0,1,0],
				[0,1,0]
			];

			expect(evolve(initialState)).toEqual(resultState);
		});
	});


/***/ }),
/* 2 */
/***/ (function(module, exports) {

	module.exports = function(){

		/*
			Scenarios:
			1) allCellsDead -> All cells will remain dead!
			2) livingNeighbours < 2 -> Underpopulation! The cell will die!
			3) livingNeighbours > 3 -> Overcrowding! The cell will die!
			4) (livingNeighbours == 2 || livingNeighbours == 3) && cellIsAlive -> The cell will live!
			5) livingNeighbours == 3 && cellIsDead -> The cell will become alive!

			Assumptions:
			- A cells existing state does not matter if it has three living neighbours as it will be alive regardless
			- The grid will be a perfect rectangle
		*/
		
		function evolve(gridState){
			var newState = [];
			console.log("Started...");

			for(var x = 0; x < gridState.length; x++) {
				for(var y = 0; x < gridState[0].length; y++) {
					livingNeighbours = getNeighbours(gridState, x, y);
					if(livingNeighbours < 2) newState[x][y] = 0; // dead
					if(livingNeighbours > 3) newState[x][y] = 0; // dead
					if(livingNeighbours == 2 && gridState[x][y] == 1) newState[x][y] = 1; // survive
					if(livingNeighbours == 3) newState[x][y] == 1; // alive
				}
			}

			console.log("Done!");
			return newState;
		}

		function getNeighbours(gridState, x, y) {
			livingNeighbours = 0;
			
			// top
			if (y-1 > 0 && x-1 > 0) livingNeighbours += gridState[x-1, y-1]; // top left cell
			if (y-1 > 0) livingNeighbours += gridState[x, y-1]; // top cell
			if (y-1 > 0 && x+1 > 0) livingNeighbours += gridState[x+1, y-1]; // top right cell

			// mid
			if(x-1 > 0) livingNeighbours += gridState[x-1, y]; // left cell
			if(x+1 > 0) livingNeighbours += gridState[x+1, y]; // right cell

			// bottom
			if (y+1 > 0 && x-1 > 0) livingNeighbours += gridState[x-1, y+1]; // bottom left cell
			if (y+1 > 0) livingNeighbours += gridState[x, y+1]; // bottom cell
			if (y+1 > 0 && x+1 > 0) livingNeighbours += gridState[x+1, y+1]; // bottom right cell

			return livingNeighbours;
		}

		return {
			evolve: evolve
		};
	};


/***/ })
/******/ ]);